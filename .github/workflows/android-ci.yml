# -------------------------------------------------------
# üèãÔ∏è Android CI Workflow for Vital Fitness App
# -------------------------------------------------------
# This workflow automatically:
# 1. Builds the Android app (debug build)
# 2. Runs local unit tests
# 3. Spins up Firebase emulators for Auth & Firestore
# 4. Runs integration tests (connected tests)
# 5. Uploads the APK artifact
# -------------------------------------------------------

name: Android CI - Vital Fitness App

# Trigger this workflow on pushes and pull requests to main
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    # -------------------------------------------------------
    # Step 1: Checkout the repository
    # -------------------------------------------------------
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # -------------------------------------------------------
      # Step 2: Set up Java (required for Gradle)
      # -------------------------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # -------------------------------------------------------
      # Step 3: Set up Android SDK tools
      # -------------------------------------------------------
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      # -------------------------------------------------------
      # Step 4: Cache Gradle dependencies for faster builds
      # -------------------------------------------------------
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # -------------------------------------------------------
      # Step 5: Give execute permission to Gradle wrapper
      # -------------------------------------------------------
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x gradlew

      # -------------------------------------------------------
      # Step 6: Build the Debug version of your app
      # -------------------------------------------------------
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      # -------------------------------------------------------
      # Step 7: Run Local Unit Tests (fast)
      # -------------------------------------------------------
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # -------------------------------------------------------
      # Step 8: Start Firebase Emulators (Auth + Firestore)
      # -------------------------------------------------------
      # This step runs Firebase locally so you can safely test
      # database and authentication logic without touching
      # your production Firebase project.
      # Make sure you have `firebase.json` and `.firebaserc` committed.
      # -------------------------------------------------------
      - name: Start Firebase Emulators
        uses: w9jds/firebase-action@v13.4.0
        with:
          args: emulators:start --only firestore,auth --project demo-vital
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        # Use background mode so Gradle can connect to it
        continue-on-error: true

      # -------------------------------------------------------
      # Step 9: Run Instrumented Tests (UI + integration tests)
      # -------------------------------------------------------
      # This will launch an Android emulator and execute your
      # connected tests (e.g., testing Firebase reads/writes).
      # -------------------------------------------------------
      - name: Run Instrumented Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis
          arch: x86_64
          script: ./gradlew connectedDebugAndroidTest

      # -------------------------------------------------------
      # Step 10: Upload the built APK as an artifact
      # -------------------------------------------------------
      # This lets you download your app-debug.apk from GitHub Actions
      # for manual testing or distribution.
      # -------------------------------------------------------
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: Vital-Debug-APK
          path: app/build/outputs/apk/debug/app-debug.apk
